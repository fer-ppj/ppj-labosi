int novo_stanje(automat)
	automat.br_stanja = automat.br_stanja + 1
	vrati automat.br_stanja - 1

bool je_operator(izraz, i)
	int br = 0
	dok je i-1>=0 && izraz[i-1]==’\\’ // ovo je jedan \, kao u Cu
		br = br + 1
		i = i - 1
	kraj dok
	vrati br%2 == 0

ParStanja pretvori(izraz, automat)
	niz izbori
	int br_zagrada = 0
	za (i=0; i<duljina(izraz); i=i+1)
		ako je izraz[i]==’(‘ && je_operator(izraz, i)
			br_zagrada = br_zagrada + 1
		inače ako je izraz[i]==’)’ && je_operator(izraz, i)
			br_zagrada = br_zagrada - 1
		inače ako je br_zagrada==0 && izraz[i]==’|’ && je_operator(izraz, i)
			grupiraj lijevi negrupirani dio niza znakova izraz u niz izbori
		kraj ako
	kraj za
	ako je pronađen barem jedan operator izbora
		grupiraj preostali negrupirani dio niza znakova izraz u niz izbori

    int lijevo_stanje = novo_stanje(automat)
	int desno_stanje = novo_stanje(automat)
	ako je pronađen barem jedan operator izbora
	  za (i=0; i<br_elemenata(izbori); i=i+1)
	    ParStanja privremeno = pretvori(izbori[i], automat)
	    dodaj_epsilon_prijelaz(automat, lijevo_stanje, privremeno.lijevo_stanje)
	    dodaj_epsilon_prijelaz(automat, privremeno.desno_stanje, desno_stanje)
	  kraj za
	inače
        bool prefiksirano = laž
        int trenutno_stanje = lijevo_stanje
	    za (i=0; i<duljina(izraz); i=i+1)
	        ako je prefiksirano istina
                // slučaj 1
                prefiksirano = laž
                char prijelazni_znak
                ako je izraz[i] == ‘t’
                    prijelazni_znak = ‘\t’
                inače ako je izraz[i] == ‘n’
                    prijelazni_znak = ‘\n’
                inače ako je izraz[i] == ‘_’
                    prijelazni_znak = ‘ ‘
                inače
                    prijelazni_znak = izraz[i]
                kraj ako
                
                int sljedece_stanje = novo_stanje(automat)
                dodaj_prijelaz(automat, trenutno_stanje, sljedece_stanje, prijelazni_znak)

                // provjeri ponavljanje
                ako je i+1<duljina(izraz) && izraz[i+1]==’*’
                    dodaj_epsilon_prijelaz(automat, trenutno_stanje, sljedece_stanje)
                    dodaj_epsilon_prijelaz(automat, sljedece_stanje, trenutno_stanje)
                    i = i+1
                kraj ako
                
                trenutno_stanje = sljedece_stanje
	        inače
                // slučaj 2
                ako je izraz[i] == ‘\\’
                    prefiksirano = istina
                    nastavi za petlju // continue u Cu
                kraj ako
                ako je izraz[i] != ‘(‘
                    // slučaj 2a
                    int sljedece_stanje = novo_stanje(automat)
                    ako je izraz[i] == ‘$’
                        dodaj_epsilon_prijelaz(automat, trenutno_stanje, sljedece_stanje)
                    inače
                        dodaj_prijelaz(automat, trenutno_stanje, sljedece_stanje, izraz[i])
                    kraj ako

                    // provjeri ponavljanje
                    ako je i+1<duljina(izraz) && izraz[i+1]==’*’
                        dodaj_epsilon_prijelaz(automat, trenutno_stanje, sljedece_stanje)
                        dodaj_epsilon_prijelaz(automat, sljedece_stanje, trenutno_stanje)
                        i = i+1
                    kraj ako

                    trenutno_stanje = sljedece_stanje
                inače
                    // slučaj 2b
                    int j = *pronađi odgovarajuću zatvorenu zagradu*
                    ParStanja privremeno = pretvori(izraz[i+1..j-1], automat)
                    dodaj_epsilon_prijelaz(automat, trenutno_stanje, privremeno.lijevo_stanje)
                    i = j
                    trenutno_stanje = privremeno.desno_stanje
                    ako je i+1<duljina(izraz) && izraz[i+1]==’*’
                        dodaj_epsilon_prijelaz(automat, privremeno.lijevo_stanje, privremeno.desno_stanje)
                        dodaj_epsilon_prijelaz(automat, privremeno.desno_stanje, privremeno.lijevo_stanje)
                        i = i+1
                    kraj ako
                kraj ako
	        kraj ako
	    kraj za
        dodaj_epsilon_prijelaz(automat, trenutno_stanje, desno_stanje)
    kraj ako
    
    vrati par lijevo_stanje, desno_stanje

